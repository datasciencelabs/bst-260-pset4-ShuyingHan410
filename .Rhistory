y = "Total deaths (cumulative)"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
library(ggplot2)
cases |>
mutate(year = as.character(format(date, "%Y"))) |>
filter(year %in% c(2020, 2021)) |>
inner_join(
population |>
transmute(state, year = as.character(year), population, region_name),
by = c("state","year")) |>
mutate (cases_scale = (cases/population)*1e5) |>
ggplot(aes(x = date, y = cases_scale , group = state, color = state)) +
geom_line(alpha = 0.7, linewidth = 0.5) +
facet_wrap(~ region_name) +
labs(
title = "Weekly COVID-19 Cases per 100,000 by State (2020–2021)",
x = "Week (by end date)",
y = "Cases per 100,000",
color = "State"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
y = "Total deaths (cumulative)"
)
# gitignore?
source("census-key.R")
# gitignore?
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get   = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key   = census_key
)
response <- request |> req_perform()
response$status_code
resp_content_type(response)
# population <- resp_body_json (response)
# ask about the matrix
# unlist() flattens the nested list into a vector
population <- resp_body_json(response) |> do.call(rbind, args = _)
# option2: resp_body_json(response, simplifyVector = TRUE)
class(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
# Use janitor row to names function to make first row column name
row_to_names(1) |>
# convert to tibble
as_tibble() |>
# remove state ID column
select(-state) |>
# change the name of the column with state names to `state_name`
rename(state_name = NAME) |>
mutate(
state_name = as.character(unlist(state_name)),  # <- fix list-column
) |>
# use pivot long to tidy data: reshape wide year columns into long format with 'year' and 'population'
pivot_longer (starts_with("POP_"),
names_to = "year",
values_to = "population") |>
# remove pop from year and parese all relevant colunns to numeric
mutate(year = sub("^POP_","", year),
year = as.numeric(year),
population = as.numeric (population))|>
# add state abbreviations using state.abb variable
left_join(tibble(state_name = state.name, state = state.abb),
by = "state_name"
) |>
# use case_when to add abbreviations for DC and PR
# keep whatever was already in the state column
mutate(state = case_when(state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR", TRUE~state)
)
population
population |>
# reorder state by population
mutate(state_name = reorder(state_name, population)) |>
ggplot(aes(x=state_name, y=population)) +
# use geom_col to plot barplot
geom_col() +
# flip coordinates
coord_flip() +
# facet by year
facet_wrap(~year) +
labs(
x = "Population",
y = "State",
title = "State Populations in 2020 and 2021"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_dat <- fromJSON(url)
regions <- regions_dat |>
mutate(region_name = if_else(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"A shorter name",
region_name
)) |>
# takes the list-column `states` to get one row per state.
unnest(states) |>
rename(state_name = states)|>
filter(state_name %in% state.name | state_name == "District of Columbia"|state_name =="Puerto Rico")
head(regions)
# Method presented by TF
#regions_method2 <- regions_dat |>
#  mutate(
#    region = region,
#    region_name = region_name,
#    states = states
#  ) |> separate_rows(states, sep = ",") |>
#  rename(state_name = states)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query( ) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
print("Not all the data is here, only 1000 row shown in the data frame")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query('$limit'=10000000000) |>
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
#  produce a data frame with columns `state`, `date` (should be the end date) and `cases`
cases <- cases_raw |>
# use transmute()  adds new columns (or modifies existing ones) and then drops all other columns not mentioned.
transmute(
state,
# YYYY-MM-DD format
date  = as.Date(sub("T.*", "", end_date)),
cases = as.numeric(new_cases)) |>
filter(!is.na(state), !is.na(date), !is.na(cases))
library(ggplot2)
cases |>
mutate(year = as.character(format(date, "%Y"))) |>
filter(year %in% c(2020, 2021)) |>
left_join(
population |>
transmute(state, year = as.character(year), population, region_name),
by = c("state","year")) |>
mutate (cases_scale = (cases/population)*1e5) |>
filter(!is.na(cases_scale), !is.na(date)) |>
ggplot(aes(x = date, y = cases_scale , group = state, color = state)) +
geom_line(alpha = 0.8, linewidth = 0.3) +
facet_wrap(~ region_name) +
labs(
title = "Weekly COVID-19 Cases per 100,000 by State (2020–2021)",
x = "Week (by end date)",
y = "Cases per 100,000",
color = "State"
)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>
arrange(year, month) |>
kable(
col.names = c("Year", "Month", "Total Cases"),
caption = "By Month COVID-19 Cases (2020-2021)"
)
View(cases)
View(cases_raw)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter(!is.na(state), !is.na(date))
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex = "All Sexes")
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex == "All Sexes")
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex == "All Sexes")|>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex == "All Sexes")
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex == "All Sexes", age_group== "All Ages", group= "By Total")|>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
filter (sex == "All Sexes", age_group== "All Ages", group== "By Total")|>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
View(deaths)
deaths |>
# exclude United States and New York City which are not states
filter(!is.na(state), state != "United States", state != "New York City")|>
group_by(state) |>
summarise(tot_deaths = sum(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |> # or could use slice_max
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
y = "Total deaths "
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
# filter the each the correct total death
filter (sex == "All Sexes", age_group== "All Ages", group== "By Total")|>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(covid_19_deaths)
)|>
filter(!is.na(state), !is.na(date), !is.na(deaths))
View(deaths)
# gitignore?
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get   = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key   = census_key
)
response <- request |> req_perform()
response$status_code
resp_content_type(response)
# population <- resp_body_json (response)
# ask about the matrix
# unlist() flattens the nested list into a vector
population <- resp_body_json(response) |> do.call(rbind, args = _)
# option2: resp_body_json(response, simplifyVector = TRUE)
class(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
# Use janitor row to names function to make first row column name
row_to_names(1) |>
# convert to tibble
as_tibble() |>
# remove state ID column
select(-state) |>
# change the name of the column with state names to `state_name`
rename(state_name = NAME) |>
mutate(
state_name = as.character(unlist(state_name)),  # <- fix list-column
) |>
# use pivot long to tidy data: reshape wide year columns into long format with 'year' and 'population'
pivot_longer (starts_with("POP_"),
names_to = "year",
values_to = "population") |>
# remove pop from year and parese all relevant colunns to numeric
mutate(year = sub("^POP_","", year),
year = as.numeric(year),
population = as.numeric (population))|>
# add state abbreviations using state.abb variable
left_join(tibble(state_name = state.name, state = state.abb),
by = "state_name"
) |>
# use case_when to add abbreviations for DC and PR
# keep whatever was already in the state column
mutate(state = case_when(state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR", TRUE~state)
)
population
population |>
# reorder state by population
mutate(state_name = reorder(state_name, population)) |>
ggplot(aes(x=state_name, y=population)) +
# use geom_col to plot barplot
geom_col() +
# flip coordinates
coord_flip() +
# facet by year
facet_wrap(~year) +
labs(
x = "Population",
y = "State",
title = "State Populations in 2020 and 2021"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_dat <- fromJSON(url)
regions <- regions_dat |>
mutate(region_name = if_else(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"A shorter name",
region_name
)) |>
# takes the list-column `states` to get one row per state.
unnest(states) |>
rename(state_name = states)|>
filter(state_name %in% state.name | state_name == "District of Columbia"|state_name =="Puerto Rico")
head(regions)
# Method presented by TF
#regions_method2 <- regions_dat |>
#  mutate(
#    region = region,
#    region_name = region_name,
#    states = states
#  ) |> separate_rows(states, sep = ",") |>
#  rename(state_name = states)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query( ) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE) |>
as_tibble()
print("Not all the data is here, only 1000 row shown in the data frame")
View(population)
View(cases_raw)
