month       = month(month_start, label = TRUE, abbr = FALSE)  # month name
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month, month_num)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
month_start = floor_date(date, "month"), # snap each date to its month
year = year(month_start),
month_num   = month(month_start),
month       = month(month_start, label = TRUE, abbr = FALSE)  # month name
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month, month_num)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date= ymd(date),
month_start = floor_date(date, "month"), # snap each date to its month
year = year(month_start),
month_num   = month(month_start),
month       = month(month_start, label = TRUE, abbr = FALSE)  # month name
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month, month_num)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date= ymd(date),
month_start = floor_date(date, "month"), # snap each date to its month
year  = year(date),
month_num   = month(month_start),
month       = month(month_start, label = TRUE, abbr = FALSE)  # month name
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month, month_num)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date= as.data(date),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month, month_num)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date= as.data(date),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date= ymd(date),
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date = ymd(date),
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month) |>
kable(
col.names = c("Year", "Month", "Total cases"),
)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date = ymd(date),
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>
kable(
col.names = c("Year", "Month", "Total Cases"),
caption = "Monthly COVID-19 Cases (2020-2021)"
)
library(dplyr)
library(lubridate)
library(knitr)
cases |>
mutate(
date = ymd(date),
year = year(date),
month = month(date, label = TRUE, abbr = FALSE)
) |>
filter(!is.na(date), year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarize(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>
kable(
col.names = c("Year", "Month", "Total Cases"),
caption = "Monthly COVID-19 Cases (2020-2021)"
)
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths <- deaths_url |>
request() |>
req_url_query("$limit" = 500000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, deaths = tot_death) |>  # Rename tot_death to deaths
mutate(
date = as.Date(date),  # Convert to proper Date format
deaths = as.numeric(deaths)  # Ensure deaths are numeric
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 500000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, deaths = tot_death) |>  # Rename tot_death to deaths
mutate(
date = as.Date(date),  # Convert to proper Date format
deaths = as.numeric(deaths)  # Ensure deaths are numeric
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 500000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query('$limit'=10000000000) |>
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
#  produce a data frame with columns `state`, `date` (should be the end date) and `cases`
cases <- cases_raw |>
# use transmute()  adds new columns (or modifies existing ones) and then drops all other columns not mentioned.
transmute(
state,
# YYYY-MM-DD format
date  = as.Date(sub("T.*", "", end_date)),
cases = as.numeric(new_cases)) |>
filter(!is.na(state), !is.na(date), !is.na(cases))
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, deaths = total_death) |>
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, total_death) |>
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, death = total_death)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, date= end_death = total_death)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date, date= end_death, death= total_death)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_death, death= total_death)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_death)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths) |>
mutate(
date = as.Date(date),  # Convert to proper Date format
deaths = as.numeric(deaths)  # Ensure deaths are numeric
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths) |>
mutate(
date = ymd(date),  # Convert to proper Date format
deaths = as.numeric(deaths)  # Ensure deaths are numeric
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths) |>
mutate(
date = ymd(date),
deaths = as.numeric(deaths)
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths) |>
mutate(
date = ymd(date),
deaths = as.numeric(deaths)
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, death= total_deaths) |>
mutate(
date = ymd(date),
deaths = as.numeric(deaths)
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, deaths= total_deaths) |>
mutate(
date = ymd(date),
deaths = as.numeric(deaths)
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
select(state, date= end_date, deaths= total_deaths) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
mutate(
date = ymd(date),
deaths = as.numeric(deaths)
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = ymd(end_date),
deaths = as.numeric(total_deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = ymd(end_date),
deaths = as.numeric(total_deaths)
)
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble()
View(deaths)
deaths <- request(deaths_url) |>
req_url_query("$limit" = 200000) |>  # Remove default limit by setting a high value
req_perform() |>
resp_body_string() |>
fromJSON() |>
as_tibble() |>
transmute(
state,
date   = as.Date(end_date),
deaths = as.numeric(total_deaths)
)
View(deaths)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, total_deaths))
View(deaths)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths))
View(state_death)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = comma) +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
library(ggplot2)
cases |>
mutate(year = as.character(format(date, "%Y"))) |>
filter(year %in% c(2020, 2021)) |>
inner_join(
population |>
transmute(state, year = as.character(year), population, region_name),
by = c("state","year")) |>
mutate (cases_scale = (cases/population)*1e5) |>
ggplot(aes(x = date, y = cases_scale , group = state, color = state)) +
geom_line(alpha = 0.7, linewidth = 0.5) +
facet_wrap(~ region_name) +
labs(
title = "Weekly COVID-19 Cases per 100,000 by State (2020–2021)",
x = "Week (by end date)",
y = "Cases per 100,000",
color = "State"
)
state_death <- deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
x = NULL,
y = "Total deaths (cumulative)"
)
deaths |>
group_by(state) |>
summarise(tot_deaths = max(deaths, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(tot_deaths)) |>
slice_head(n = 10) |>
mutate(state = fct_reorder(state, tot_deaths)) |>
ggplot(aes(x = state, y = tot_deaths)) +
geom_col() +
scale_y_continuous() +
coord_flip() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
y = "Total deaths (cumulative)"
)
